import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SidebarProvider } from "./components/common/sidebar";
import { SidebarToggle } from "./components/chat/header/sidebar-toggle";
import { SidebarPage } from "./components/chat/sidebar";
import { useSidebar } from "./components/common/sidebar";
import { SharedDataProvider } from "./context/sharedDataContext";
import { ThemeProvider } from "./context/themeContext";
import { AuthProvider } from "./context/authContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "GPT App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased h-screen overflow-hidden`}
      >

        <ThemeProvider>
          <AuthProvider>
            <SidebarProvider>
              <SharedDataProvider>
                <div className="flex transition-all duration-300">
                  <SidebarPage />
                  <div className="flex-1 transition-all duration-300">
                    {children}
                  </div>
                </div>
              </SharedDataProvider>
            </SidebarProvider>
          </AuthProvider>
        </ThemeProvider>
        <script
          dangerouslySetInnerHTML={{
            __html: `
      (function() {
        try {
          const theme = localStorage.getItem('theme');
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          if (theme === 'dark' || (!theme && prefersDark)) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
        } catch (_) {}
      })();
    `,
          }}
        />

      </body>

    </html>
  );
}
